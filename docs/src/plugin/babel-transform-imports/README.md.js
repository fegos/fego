webpackJsonp([2],{476:function(n,s){n.exports={content:["article",["p","Fork from ",["a",{title:null,href:"https://bitbucket.org/amctheatres/babel-transform-imports"},"https://bitbucket.org/amctheatres/babel-transform-imports"]," \nTransforms member style imports:"],["pre",{lang:"javascript",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Dialog <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'fego\'</span>'},["code","import { Dialog } from 'fego'"]],["p","...into default style imports:"],["pre",{lang:"javascript",highlighted:'<span class="token keyword">import</span> Dialog <span class="token keyword">from</span> <span class="token string">\'fego/lib/Dialog\'</span>'},["code","import Dialog from 'fego/lib/Dialog'"]],["p","If set ",["code","style:true"]," config, then it will be transformed to:"],["pre",{lang:"javascript",highlighted:'<span class="token keyword">import</span> Dialog <span class="token keyword">from</span> <span class="token string">\'fego/lib/Dialog\'</span>\n<span class="token keyword">import</span> <span class="token string">\'fego/lib/Dialog/style.css\'</span>'},["code","import Dialog from 'fego/lib/Dialog'\nimport 'fego/lib/Dialog/style.css'"]],["p","Or set ",["code",'style: "index"']," config, then it will be transformed to:"],["pre",{lang:"javascript",highlighted:'<span class="token keyword">import</span> Dialog <span class="token keyword">from</span> <span class="token string">\'fego/lib/Dialog\'</span>\n<span class="token keyword">import</span> <span class="token string">\'fego/lib/Dialog/index.css\'</span>'},["code","import Dialog from 'fego/lib/Dialog'\nimport 'fego/lib/Dialog/index.css'"]],["h2","That's stupid, why would you do that?"],["p","When Babel encounters a member style import such as:"],["pre",{lang:"javascript",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Grid<span class="token punctuation">,</span> Row<span class="token punctuation">,</span> Col <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-bootstrap\'</span><span class="token punctuation">;</span>'},["code","import { Grid, Row, Col } from 'react-bootstrap';"]],["p","it will generate something similarish to:"],["pre",{lang:"javascript",highlighted:'<span class="token keyword">var</span> reactBootstrap <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'react-bootstrap\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> Grid <span class="token operator">=</span> reactBootstrap<span class="token punctuation">.</span>Grid<span class="token punctuation">;</span>\n<span class="token keyword">var</span> Row <span class="token operator">=</span> reactBootstrap<span class="token punctuation">.</span>Row<span class="token punctuation">;</span>\n<span class="token keyword">var</span> Col <span class="token operator">=</span> reactBootstrap<span class="token punctuation">.</span>Col<span class="token punctuation">;</span>'},["code","var reactBootstrap = require('react-bootstrap');\nvar Grid = reactBootstrap.Grid;\nvar Row = reactBootstrap.Row;\nvar Col = reactBootstrap.Col;"]],["p","Some libraries, such as react-bootstrap and lodash, are rather large and\npulling in the entire module just to use a few pieces would cause unnecessary\nbloat to your client optimized (webpack etc.) bundle.  The only way around\nthis is to use default style imports:"],["pre",{lang:"javascript",highlighted:'<span class="token keyword">import</span> Grid <span class="token keyword">from</span> <span class="token string">\'react-bootstrap/lib/Grid\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Row <span class="token keyword">from</span> <span class="token string">\'react-bootstrap/lib/Row\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Col <span class="token keyword">from</span> <span class="token string">\'react-bootstrap/lib/Col\'</span><span class="token punctuation">;</span>'},["code","import Grid from 'react-bootstrap/lib/Grid';\nimport Row from 'react-bootstrap/lib/Row';\nimport Col from 'react-bootstrap/lib/Col';"]],["p","But, the more pieces we need, the more this sucks.  This plugin will allow you\nto pull in just the pieces you need, without a separate import for each item.\nAdditionally, it can be configured to throw when somebody accidentally writes\nan import which would cause the entire module to resolve, such as:"],["pre",{lang:"javascript",highlighted:'<span class="token keyword">import</span> Bootstrap<span class="token punctuation">,</span> <span class="token punctuation">{</span> Grid <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-bootstrap\'</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// -- or --</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Bootstrap <span class="token keyword">from</span> <span class="token string">\'react-bootstrap\'</span><span class="token punctuation">;</span>'},["code","import Bootstrap, { Grid } from 'react-bootstrap';\n// -- or --\nimport * as Bootstrap from 'react-bootstrap';"]],["h2","Installation"],["pre",{lang:null,highlighted:'npm install <span class="token operator">-</span><span class="token operator">-</span>save<span class="token operator">-</span>dev babel<span class="token operator">-</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>modules'},["code","npm install --save-dev babel-plugin-transform-modules"]],["h2","Usage"],["p",["em","In .babelrc:"]],["pre",{lang:"json",highlighted:'<span class="token punctuation">{</span>\n    <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">[</span><span class="token string">"transform-modules"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token property">"fego"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">"transform"</span><span class="token operator">:</span> <span class="token string">"fego/lib/${member}"</span><span class="token punctuation">,</span>\n                <span class="token property">"preventFullImport"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>'},["code",'{\n    "plugins": [\n        ["transform-modules", {\n            "fego": {\n                "transform": "fego/lib/${member}",\n                "preventFullImport": true\n            }\n        }]\n    ]\n}']],["h2","Advanced Transformations"],["p","In cases where the provided default string replacement transformation is not\nsufficient (for example, needing to execute a RegExp on the import name), you\nmay instead provide a path to a .js file which exports a function to run\ninstead.  Keep in mind that the .js file will be ",["code","require"],"d relative from this\nplugin's path, likely located in ",["code","/node_modules/babel-plugin-transform-modules"],".\nYou may provide any filename, as long as it ends with ",["code",".js"],"."],["p",".babelrc:"],["pre",{lang:"json",highlighted:'<span class="token punctuation">{</span>\n    <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">[</span><span class="token string">"transform-modules"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token property">"my-library"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">"transform"</span><span class="token operator">:</span> <span class="token string">"../../path/to/transform.js"</span><span class="token punctuation">,</span>\n                <span class="token property">"preventFullImport"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>'},["code",'{\n    "plugins": [\n        ["transform-modules", {\n            "my-library": {\n                "transform": "../../path/to/transform.js",\n                "preventFullImport": true\n            }\n        }]\n    ]\n}']],["p","/path/to/transform.js:"],["pre",{lang:"js",highlighted:'module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>importName<span class="token punctuation">,</span> styleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>styleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment" spellcheck="true">// set `style: true` option to transform style</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>importName <span class="token operator">===</span> styleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment" spellcheck="true">// full import</span>\n            <span class="token comment" spellcheck="true">// eg: `import xx from \'my-library\'`</span>\n            <span class="token comment" spellcheck="true">// will be transformed add `require(\'my-library/etc/style.css\')`</span>\n            <span class="token keyword">return</span> <span class="token string">\'my-library/etc/\'</span> <span class="token operator">+</span> styleName <span class="token operator">+</span> <span class="token string">\'.css\'</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment" spellcheck="true">// member import</span>\n            <span class="token comment" spellcheck="true">// eg: `import {xx} from \'my-library\'`</span>\n            <span class="token comment" spellcheck="true">// will be transformed add `require(\'my-library/etc/XX/style.css\')`</span>\n            <span class="token keyword">return</span> <span class="token string">\'my-library/etc/\'</span> <span class="token operator">+</span> importName<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\'/\'</span> <span class="token operator">+</span> styleName <span class="token operator">+</span> <span class="token string">\'.css\'</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token string">\'my-library/etc/\'</span> <span class="token operator">+</span> importName<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>'},["code","module.exports = function(importName, styleName) {\n    if (styleName) {\n        // set `style: true` option to transform style\n        if (importName === styleName) {\n            // full import\n            // eg: `import xx from 'my-library'`\n            // will be transformed add `require('my-library/etc/style.css')`\n            return 'my-library/etc/' + styleName + '.css'\n        } else {\n            // member import\n            // eg: `import {xx} from 'my-library'`\n            // will be transformed add `require('my-library/etc/XX/style.css')`\n            return 'my-library/etc/' + importName.toUpperCase() + '/' + styleName + '.css'\n        }\n    }\n    return 'my-library/etc/' + importName.toUpperCase();\n};"]],["p","This is a little bit hacky, but options are a bit limited due to .babelrc being\na JSON5 file which does not support functions as a type.  In Babel 7.0, it\nappears .babelrc.js files will be supported, at which point this plugin will be\nupdated to allow transform functions directly in the configuration file.\nSee: ",["a",{title:null,href:"https://github.com/babel/babel/pull/4892"},"https://github.com/babel/babel/pull/4892"]],["h2","Webpack"],["p","This can be used as a plugin with babel-loader."],["p","webpack.config.js:"],["pre",{lang:"js",highlighted:'module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.js$/</span><span class="token punctuation">,</span>\n        exclude<span class="token punctuation">:</span> <span class="token regex">/(node_modules|bower_components)/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n                query<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                        <span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'babel-plugin-transform-modules\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                            <span class="token string">"my-library"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                                <span class="token string">"transform"</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>importName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                                    <span class="token keyword">return</span> <span class="token string">\'my-library/etc/\'</span> <span class="token operator">+</span> importName<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                                preventFullImport<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                            <span class="token punctuation">}</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n                    <span class="token punctuation">]</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>'},["code","module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /(node_modules|bower_components)/,\n        use: {\n            loader: 'babel-loader',\n                query: {\n                    plugins: [\n                        [require('babel-plugin-transform-modules'), {\n                            \"my-library\": {\n                                \"transform\": function(importName) {\n                                    return 'my-library/etc/' + importName.toUpperCase();\n                                },\n                                preventFullImport: true\n                            }\n                        }]\n                    ]\n                }\n            }\n        }\n    ]\n}"]],["h2","Options"],["table",["thead",["tr",["th","Name"],["th","Type"],["th","Required"],["th","Default"],["th","Description"]]],["tbody",["tr",["td",["code","transform"]],["td",["code","string"]],["td","yes"],["td",["code","undefined"]],["td","The library name to use instead of the one specified in the import statement.  ",["code","${member}"]," will be replaced with the member, aka Grid/Row/Col/etc.  Alternatively, pass a path to a .js file which exports a function to process the transform (see Advanced Transformations)"]],["tr",["td",["code","style"]],["td",["code","boolean,string,object"]],["td","no"],["td",["code","false"]],["td","Whether or not auto add css style import, if set to ",["code","true"],", it will be same as set to ",["code","'style'"],". If set to ",["code","{name:'sty',ignore:['x', 'y']}"],", it means all member modules except ",["code","['x', 'y']"]," will be auto add css import with name 'sty.css'"]],["tr",["td",["code","preventFullImport"]],["td",["code","boolean"]],["td","no"],["td",["code","false"]],["td","Whether or not to throw when an import is encountered which would cause the entire module to be imported."]],["tr",["td",["code","camelCase"]],["td",["code","boolean"]],["td","no"],["td",["code","false"]],["td","When set to ",["code","true"],", runs ",["code","${member}"]," through _.camelCase."]],["tr",["td",["code","kebabCase"]],["td",["code","boolean"]],["td","no"],["td",["code","false"]],["td","When set to ",["code","true"],", runs ",["code","${member}"]," through _.kebabCase."]],["tr",["td",["code","snakeCase"]],["td",["code","boolean"]],["td","no"],["td",["code","false"]],["td","When set to ",["code","true"],", runs ",["code","${member}"]," through _.snakeCase."]],["tr",["td",["code","skipDefaultConversion"]],["td",["code","boolean"]],["td","no"],["td",["code","false"]],["td","When set to ",["code","true"],", will preserve ",["code","import { X }"]," syntax instead of converting to ",["code","import X"],"."]]]]],meta:{filename:"src/plugin/babel-transform-imports/README.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#That's-stupid,-why-would-you-do-that?",title:"That's stupid, why would you do that?"},"That's stupid, why would you do that?"]],["li",["a",{className:"bisheng-toc-h2",href:"#Installation",title:"Installation"},"Installation"]],["li",["a",{className:"bisheng-toc-h2",href:"#Usage",title:"Usage"},"Usage"]],["li",["a",{className:"bisheng-toc-h2",href:"#Advanced-Transformations",title:"Advanced Transformations"},"Advanced Transformations"]],["li",["a",{className:"bisheng-toc-h2",href:"#Webpack",title:"Webpack"},"Webpack"]],["li",["a",{className:"bisheng-toc-h2",href:"#Options",title:"Options"},"Options"]]]}}});